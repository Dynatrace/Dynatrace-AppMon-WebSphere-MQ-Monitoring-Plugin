/**
 * This template file was generated by dynaTrace client.
 * The dynaTrace community portal can be found here: http://community.dynatrace.com/
 * For information how to publish a plugin please visit http://community.dynatrace.com/plugins/contribute/
 **/

package com.dynatrace.plugins.mq;

import java.util.logging.Level;
import java.util.logging.Logger;

import com.dynatrace.diagnostics.pdk.Monitor;
import com.dynatrace.diagnostics.pdk.MonitorEnvironment;
import com.dynatrace.diagnostics.pdk.Status;
import com.dynatrace.diagnostics.pdk.Status.StatusCode;
import com.dynatrace.plugins.connection.*;

/**
 * @author alain.helaili
 * 
 * dynaTrace monitoring plugin object. 
 * It leverages the different subclasses of MQObjectMonitor to actually do the job.
 *
 */
public class MQMonitorPlugin implements Monitor {
	private static final Logger log = Logger.getLogger(MQMonitorPlugin.class.getName());

	private static final String CONFIG_SERVER_USERNAME = "serverUsername";
	private static final String CONFIG_SERVER_PASSWORD = "serverPassword";
	private static final String CONFIG_METHOD = "method";
	private static final String CONFIG_AUTH_METHOD="authMethod";
	private static final String CONFIG_KEY_FILE = "publicKey";
	private static final String CONFIG_PASSPHRASE = "publickeyPassphrase";
	private static final String CONFIG_PORT = "port";

	private QueueManagerMonitor queueManagerMonitor = null;

	public static final String PARAM_RUNMQSC_PATH = "runmqsc.path";
	public static final String PARAM_MQ_BIN_PATH = "mq.bin.path";
	public static final String PARAM_QUEUEMANAGER_NAME = "queueManager.name";
	public static final String PARAM_QUEUEMANAGER_COUNT = "queueManager.count";

	private ConnectionMethod connMethod;


	@Override
	public Status setup(MonitorEnvironment env) throws Exception {
		//get configuration

        String host = env.getHost().getAddress();
        String username = env.getConfigString(CONFIG_SERVER_USERNAME);
        String method = env.getConfigString(CONFIG_METHOD) == null ? "SSH" : env
                .getConfigString(CONFIG_METHOD).toUpperCase();
        String authMethod = env.getConfigString(CONFIG_AUTH_METHOD) == null ? "PASSWORD" : env
                .getConfigString(CONFIG_AUTH_METHOD).toUpperCase();

        String port = (env.getConfigString(CONFIG_PORT) == null) ? "22" : env.getConfigString(CONFIG_PORT);

		int numPort = 22;
		try{
			numPort = Integer.parseInt(port);
		} catch(NumberFormatException ex){
            log.info("could not parse port: '" + port + "' falling back to default (22)");
		}

        String password = (authMethod.equals("PUBLICKEY")) ? env.getConfigPassword(CONFIG_PASSPHRASE) : env.getConfigPassword(CONFIG_SERVER_PASSWORD);
        String keyFile = env.getConfigString(CONFIG_KEY_FILE);

		connMethod = ConnectionMethod.getConnectionMethod(method);

		try {
			if (method.equalsIgnoreCase("SSH") && authMethod.equalsIgnoreCase("PUBLICKEY")){
				((SSHConnectionMethod)connMethod).setup(host, username, password, numPort, keyFile);
			} else {
				connMethod.setup(host, username, password, numPort);
			}
		} catch (Exception e) {
			Status stat = new Status();
			stat.setStatusCode(Status.StatusCode.ErrorInfrastructure);
			stat.setShortMessage("Connecting failed");
			stat.setMessage("Connecting via " + method + " to " + host + " failed");
			stat.setException(e);

			if (log.isLoggable(Level.WARNING)){
				log.log(Level.WARNING, stat.getMessage(), e);
			}
		}
		queueManagerMonitor = new QueueManagerMonitor();
		Status qmStatus = queueManagerMonitor.setup(env);
		if(!qmStatus.getStatusCode().equals(StatusCode.Success)) {
			return qmStatus;
		}

		return new Status(Status.StatusCode.Success);
	}

	@Override
	public Status execute(MonitorEnvironment env) throws Exception {
		Status stat = new Status();
		try {
			connMethod.reconnectIfNecessary();
		} catch (Exception e) {
			String msg = "Connection seems to be unavailable and reconnect failed.";
			log.log(Level.WARNING, msg, e);
			stat.setException(e);
			stat.setExceptionMessage(msg);
			stat.setStatusCode(Status.StatusCode.ErrorInfrastructureUnreachable);
			return stat;
		}

		try {
			//log.severe("start");
			return queueManagerMonitor.execute(env, connMethod);			
		} catch (Exception e) {
			log.severe("General error : " + e.getMessage());
			return new Status(Status.StatusCode.ErrorInternalException);
		}finally{
			//log.severe("finished");
		}
	}
	
	@Override
	public void teardown(MonitorEnvironment env) throws Exception {
	}
}
